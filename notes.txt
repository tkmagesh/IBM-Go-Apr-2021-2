Name
Primary Skillset
Total Experience
Experience in Golang

Schedule
    Commence @ 8:30 AM
    Tea @ 11 for 20 mins
    Lunch @ 1 for 60 mins
    Tea @ 4 for 20 mins
    Windup @ 6:30

C -
C++ - 20 years
Ruby - 15 years
Java - 15 years
C# - 13 years
Golang - 2 years

Google
Cloud Native
Low memory footprint
Easy to learn
Supports OO & Functional

Simplicity
    Paradox of Choice - Barray Shwartz
    25 keywords
Functional
    Functions are first class citizens
        Can be assigned to variables
        Supports Higher Order Functions
            Can be passed as arguments to other functions
            Can be returned as return values from other functions
        Can maintain state using closures
        Variadic functions

Built for concurrency
    language features for concurrency
        go, chan (data type), select, range
    No exceptions (ONLY errors)
    No classes, no inhertance (prefer composition instead)
    Low memory footprint
    Parallellization is built in


More and more application are connected



Multithreading
    Resource Intensive (2MB RAM)
    CPU
    Not Efficient for I/O

Single Thread (I/O concurrency)
    Resource Efficient (Scheduler - Event Loop)
    Not suitable for CPU intensive operations

Go
    Builtin Scheduler
    1 thread = 1000s of goroutine



func fn1(){
    throw new Exception("");
    fmt.Println("fn1 is invoked")
}

func fn2(){
    fmt.Println("fn2 is invoked")
}

//start
func main(){
    try {
        go fn1()
        go fn2()
        
    } catch {

    }
    fmt.Println("main completed")  
}


main completed
fn1 is invoked
fn2 is invoked

Goland (Jetbrains)

http://www.golang.org
http://code.visualstudio.com
In visualstudio code
    cmd + shift + p
        select "go: install/update tools"

Learning a language
    1. Data types
    2. Programming Constructs
    3. APIs
    4. Modularity 
    5. Unique features of the language
    6. How to debug

Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real float32 imaginary float32)
    complex128 (real float64 imaginary float64)

    byte (alias for uint8)
    rune (alias for int32) (represent 1 unicode character)

Go application organization
    Module
    package

$GOPATH
    GoApps
        bin
        pkg
        src
            github.com
                tkmagesh
                    App1

$GOROOT
    path to the go tools

to create a module file
    go mod init <module_name>
            

Constructs
    if else
    switch
    for

/* To be discussed */
	var x float64 = 404932374503908.2134873294
	fmt.Printf("%9.5f\n", x)

Write a console program that will display the following menu
    1. add
    2. subtract
    3. multiply
    4. divide
    5. exit

state
    structs
behavior
    functions

Collections
    Array
        Collection of data of the same type
        Fixed Size (determined by the size when the array is created)

    Slice
        Collection of data of the same type
        Varying size
        It internally uses an Array
        Provides convenient wrapper for an Array

    Map
        Collection of Key/Value pairs
        Type of Key/Values can be determined by the developer

Pointer
    address to a value

Dont share memory for communication, instead communicate by sharing memory

Pure functions
    A function can be called as a 'pure function' if the invocation of the function can be replaced with the result of the function without affecting the outcome
        - should not have any side-effects
        - depends on data that is NOT given as arguments

/*
func add(x,y int) int{
    fmt.Printf("processing %d and %d\n", x, y)
    return x + y
}
*/

var z int = 100
func add(x,y int) int {
    return x + y + z
}

z = 1000
func addClient(x,y int){
    result := add(10,20)
    fmt.Println("result = ", result)
}

output:
result = 300

output:
processing 10 and 20
result = 30

output:
result = 30

output:
result = 130

Channels enables communication between goroutines
    channel is a data type in Go
    Creation
        ch := make(chan int)
    reading and writing data in the channel
        Using '<-' operator

        writing data into the channel
            ch <- data

        Read data from the channel
            variable := <- ch


Browsers (Virtual OS) (HTML5)

    Data Storage
        LocalStorage
        SessionStorage
        IndexedDB
    File System Access
        File System API
    Interprocess Communication
        Server Sent Events
        WebSockets
        WebRTC (P2P)
    Install
        Service Worker
    Device Access
        APIs


RPC
    Remote Procedure Call

gRPC
    uses http2
    uses protobuf (for serialization)
    tools for other languages (java, go, python, C#)
    Communication Patterns
        request response
        Client streaming
        Server streaming
        Bidirectional streaming

    message format using protobuf
    service format using protobuf

    Generate stubs


Tools for gRPC
    go get -u google.com.golang.org/grpc
    go get -u github.com/golang/protobuf/protoc-gen-go

To generate the stubs
    Run the following command from the "grpc_demos" folder 
    protoc greet/greetpb/greet.proto --go_out=plugins=grpc:.

